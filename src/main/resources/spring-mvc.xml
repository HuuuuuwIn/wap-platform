<?xml version="1.0" encoding="UTF-8"?>
<!-- Bean头部 -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
             http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
             http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
             http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
             http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

<!--     <context:property-placeholder location="classpath:sys.properties,classpath:zoom-client.properties,classpath:db.properties" file-encoding="UTF-8"/> -->
	<context:property-placeholder location="classpath:sys.properties" file-encoding="UTF-8"/>
    <!-- Maps '/' requests to the 'index' view -->
    <!--<mvc:view-controller path="/" view-name="index"/>-->
    <mvc:resources mapping="/assets/**" location="/assets/" />
    <mvc:resources mapping="/favicon.ico" location="/assets/img/"/>
    <mvc:resources mapping="/tpl/*.html" location="/WEB-INF/views/tpl/"/>
    <mvc:resources mapping="/views/**" location="/WEB-INF/views/views/"/>
    <mvc:resources mapping="/views/*.html" location="/WEB-INF/views/views/"/>
    <mvc:resources mapping="/views/profile/*.html" location="/WEB-INF/views/views/profile/"/>
    <mvc:resources mapping="/views/datatables/*.html" location="/WEB-INF/views/views/datatables/"/>
    <mvc:resources mapping="/uploads/**" location="/uploads/"/>
    <!-- 激活@Controller模式 -->
    <!--<mvc:annotation-driven />-->
    <!-- 对包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 需要更改 -->
    <context:component-scan base-package="com.zzcm.webase.act" />
    <context:component-scan base-package="com.zzcm.app.act" />

    <!-- 会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean,是spring MVC为@Controllers分发请求所必须的 -->
    <!-- 指定自己定义的validator -->
<!--     <mvc:annotation-driven validator="validator"/> -->

    <!-- JSR303 Validator定义 -->
    <!-- 以下 validator ConversionService 在使用 mvc:annotation-driven 会 自动注册 -->
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
        <property name="providerClass" value="org.hibernate.validator.HibernateValidator"/>
        <!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
        <property name="validationMessageSource" ref="messageSource"/>
    </bean>

    <!-- 国际化的消息资源文件（本系统中主要用于显示/错误消息定制） -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <!-- 在web环境中一定要定位到classpath 否则默认到当前web应用下找 -->
                <value>classpath:messages</value>
                <value>classpath:org/hibernate/validator/ValidationMessages</value>
            </list>
        </property>
        <property name="useCodeAsDefaultMessage" value="false"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="cacheSeconds" value="60"/>
    </bean>

    <mvc:interceptors>
        <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"/>
    </mvc:interceptors>

    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
        <property name="defaultLocale" value="zh_CN"/>
    </bean>

    <!-- 内容协商管理器  -->
    <!--1、首先检查路径扩展名（如my.pdf）；2、其次检查Parameter（如my?format=pdf）；3、检查Accept Header-->
    <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <!-- 扩展名至mimeType的映射,即 /user.json => application/json -->
        <!--<property name="favorPathExtension" value="false"/>-->
        <!--&lt;!&ndash; 用于开启 /userinfo/123?format=json 的支持 &ndash;&gt;-->
        <!--<property name="favorParameter" value="false"/>-->
        <!--<property name="parameterName" value="format"/>-->
        <!--&lt;!&ndash; 是否忽略Accept Header &ndash;&gt;-->
        <!--<property name="ignoreAcceptHeader" value="false"/>-->

        <property name="mediaTypes"> <!--扩展名到MIME的映射；favorPathExtension, favorParameter是true时起作用  -->
            <value>
                json=application/json
                xml=application/xml
                html=text/html
                *=*/*
            </value>
        </property>
    </bean>

    <!-- 返回json 方法一 需要导入 fastjson.jar包 -->
    <mvc:annotation-driven content-negotiation-manager="contentNegotiationManager" validator="validator">
        <mvc:message-converters register-defaults="true" >
            <ref bean="stringHttpMessageConverter" />
            <ref bean="fastJsonHttpMessageConverter" />
        </mvc:message-converters>
    </mvc:annotation-driven>


    <!-- StringHttpMessageConverter编码为UTF-8，防止乱码 -->
    <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
        <constructor-arg value="UTF-8"/>
        <property name = "supportedMediaTypes">
            <list>
                <bean class="org.springframework.http.MediaType">
                    <constructor-arg index="0" value="text"/>
                    <constructor-arg index="1" value="plain"/>
                    <constructor-arg index="2" value="UTF-8"/>
                </bean>
                <bean class="org.springframework.http.MediaType">
                    <constructor-arg index="0" value="*"/>
                    <constructor-arg index="1" value="*"/>
                    <constructor-arg index="2" value="UTF-8"/>
                </bean>
            </list>
        </property>
    </bean>

    <!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
    <bean id="fastJsonHttpMessageConverter" class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>application/json;charset=UTF-8</value>
                <value>text/plain;charset=utf-8</value>
                <value>text/html;charset=utf-8</value>
            </list>
        </property>
        <property name="features">
            <util:list>
                <!--
                QuoteFieldNames-输出key时是否使用双引号,默认为true
                WriteMapNullValue-是否输出值为null的字段,默认为false
                WriteNullNumberAsZero-数值字段如果为null,输出为0,而非null
                WriteNullListAsEmpty-List字段如果为null,输出为[],而非null
                WriteNullStringAsEmpty-字符类型字段如果为null,输出为"",而非null
                WriteNullBooleanAsFalse-Boolean字段如果为null,输出为false,而非null
                -->
                <value>WriteMapNullValue</value>
                <value>QuoteFieldNames</value>
                <value type="com.alibaba.fastjson.serializer.SerializerFeature">WriteDateUseDateFormat</value>
                <!--<value>WriteDateUseDateFormat</value>-->
            </util:list>
        </property>
    </bean>

    <bean id="castorMarshaller" class="org.springframework.oxm.castor.CastorMarshaller" />
    <bean id="marshallingHttpMessageConverter"
          class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
        <property name="marshaller" ref="castorMarshaller" />
        <property name="unmarshaller" ref="castorMarshaller" />
        <property name="supportedMediaTypes">
            <list>
                <value>text/xml;charset=UTF-8</value>
                <value>application/xml;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <!-- 返回类型定义 -->
    <util:list id="messageConverters">
        <ref bean="stringHttpMessageConverter" />
        <ref bean="fastJsonHttpMessageConverter" />
        <ref bean="marshallingHttpMessageConverter" />
    </util:list>

    <!-- 配置springMVC处理上传文件的信息 -->
    <bean id="multipartResolver" class="com.zzcm.webase.common.resolver.ZzcmMultipartResolver">
        <property name="defaultEncoding" value="utf-8"/>
        <property name="maxUploadSize" value="10485760000"/>
        <property name="maxInMemorySize" value="40960"/>
    </bean>

    <!-- 启用shrio授权注解拦截方式 -->
    <aop:config proxy-target-class="true"></aop:config>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <bean id="handlerExceptionResolver" class="com.zzcm.webase.core.resolver.ZzcmExceptionResolver">
        <property name="defaultErrorView" value=""/>
<!--         <property name="messageConverters" ref="messageConverters"/> -->
    </bean>
    
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix">
            <value>/WEB-INF/views/</value>
        </property>
        <property name="suffix">
            <value>.jsp</value>
        </property>
    </bean>
</beans>