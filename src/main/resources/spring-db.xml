<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/jdbc
    http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
    http://www.springframework.org/schema/cache
    http://www.springframework.org/schema/cache/spring-cache.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util.xsd">
    <!-- 引入属性文件 -->
<!--     <context:property-placeholder location="classpath:db.properties" file-encoding="UTF-8"/> -->

    <!-- mysql数据源配置 -->
    <bean id="druidDataSource" abstract="true" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="20" />
        <!-- 初始化大小 -->
        <property name="initialSize" value="5" />
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="60000" />
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="2" />
        <!-- 逐出连接的检测时间间隔 -->
        <property name="timeBetweenEvictionRunsMillis" value="3000" />
        <!-- 最小逐出时间 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <!-- 测试有效用的SQL Query -->
        <property name="validationQuery" value="SELECT 'x'" />
        <!-- 连接空闲时测试是否有效 -->
        <property name="testWhileIdle" value="true" />
        <!-- 获取连接时测试是否有效 -->
        <property name="testOnBorrow" value="false" />
        <!-- 归还连接时是否测试有效 -->
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="false"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="wall,stat" />
    </bean>

    <bean id="writeDateSource" parent="druidDataSource">
        <!-- 驱动名称 -->
        <property name="DriverClassName" value="${jdbc.driver.write}" />
        <!-- JDBC连接串 -->
        <property name="url" value="${jdbc.url.write}" />
        <!-- 数据库用户名称 -->
        <property name="username" value="${jdbc.username.write}" />
        <!-- 数据库密码 -->
        <property name="password" value="${jdbc.password.write}" />
    </bean>

    <!-- mybatis文件配置，扫描所有mapper文件 -->
    <bean id="writeSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
          p:dataSource-ref="writeDateSource"
          p:configLocation="classpath:mybatis-config.xml"
          p:mapperLocations="classpath:com/zzcm/*/dao/*.xml"/>

    <bean id="writeSqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" name="sqlSessionFactory" ref="writeSqlSessionFactory" />
    </bean>

    <!-- spring与mybatis整合配置，扫描所有dao -->
    <!-- org.mybatis.spring.mapper.MapperScannerConfigurer -->
    <!-- com.zzcm.webase.mybatis.spring.mapper.MapperScannerConfigurer -->
    <!-- tk.mybatis.spring.mapper.MapperScannerConfigurer -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
          p:basePackage="com.zzcm.webase.dao,com.zzcm.app.dao"
          p:sqlSessionFactoryBeanName="writeSqlSessionFactory"
          p:markerInterface="com.zzcm.webase.core.dao.BaseDao"/>

    <!-- 对dataSource 数据源进行事务管理 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="writeDateSource"/>

    <!-- 事务管理 通知 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 对insert,update,delete 开头的方法进行事务管理,只要有异常就回滚 -->
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
            <!-- select,count开头的方法,开启只读,提高数据库访问性能 -->
            <tx:method name="select*" read-only="true"/>
            <tx:method name="count*" read-only="true"/>
            <!-- 对其他方法 使用默认的事务管理 -->
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <!-- 事务 aop 配置 -->
    <aop:config>
        <aop:pointcut id="serviceMethods" expression="execution(* com.zzcm.*.service..*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods"/>
    </aop:config>

    <!-- 配置使Spring采用CGLIB代理 -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!-- 启用对事务注解的支持 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>


    <bean id="readDataSource" parent="druidDataSource">
        <!-- 驱动名称 -->
        <property name="DriverClassName" value="${jdbc.driver.read}" />
        <!-- JDBC连接串 -->
        <property name="url" value="${jdbc.url.read}" />
        <!-- 数据库用户名称 -->
        <property name="username" value="${jdbc.username.read}" />
        <!-- 数据库密码 -->
        <property name="password" value="${jdbc.password.read}" />
    </bean>

    <!-- mybatis文件配置，扫描所有mapper文件 -->
    <bean id="readSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
          p:dataSource-ref="readDataSource"
          p:configLocation="classpath:mybatis-config.xml"
          p:mapperLocations="classpath:com/zzcm/*/dao/*.xml"/>

    <bean id="readSqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" name="sqlSessionFactory" ref="readSqlSessionFactory" />
    </bean>

    <!-- spring与mybatis整合配置，扫描所有dao -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
          p:basePackage="com.zzcm.webase.dao,com.zzcm.app.dao"
          p:sqlSessionFactoryBeanName="readSqlSessionFactory"
          p:markerInterface="com.zzcm.webase.core.dao.BaseDao"/>
</beans>